#!/usr/bin/env node
var Gr = require('../index.js'),
    gr = new Gr(),
    fs = require('fs'),
    path = require('path'),
    style = require('../lib/style.js'),
    log = require('minilog')('gr');

require('minilog').enable();

// args parser (damnit)
var homePath = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];

gr.exec(process.argv.slice(2), function(err, result) {
  if(err) {
    log.error(err);
  }
});

process.exit();

// gr [options] [directory] [command]

// Smart args:
// all arguments after the last known option constitute the command
// Smart targets:
// if the first argument contains a slash and is a valid directory,
// the operation is constrained to that particular target
// Explicitly setting the command:
// gr [options] --include [directory] -- [command]

console.log(argv);

var task = argv['_'] || [];

if(task.length == 0) {
  task = 'git -c color.status=always status -sb';
} else {
  task = task.join(' ');
}

if(argv['version'] || argv['v'] ) {
  console.log(require('../package.json').version);
  process.exit();
}

if(argv['help']) {
  console.log(fs.readFileSync(__dirname + '/usage.txt').toString());
  process.exit();
}

if(argv['tag']) {
  var rest = process.argv.slice(process.argv.indexOf('--tag') + 1);
  console.log(rest);
  process.exit();
}

var repos = {};

if(argv['config']) {
  console.log(gr.config);
  process.exit();
}

gr.add(homePath);

gr.exclude([].concat(config.get('exclude'), argv['exclude']));

// require('minilog').enable();

delete argv['exclude'];

if(argv['list']) {
  gr.files().forEach(function(file) {
    var cwd = path.dirname(file.name).replace(new RegExp('^'+homePath+'/'), '~/');
    console.log(style(path.dirname(cwd) + path.sep, 'gray') + style(path.basename(cwd), 'white'));
  });
  process.exit();
}

gr.files().forEach(function(file) {
  repos[file.name] = {};
});

gr.config.items.repos = repos;

gr.config.save();

if(process.argv.length > 2) {
  var parts = process.argv.slice(2);
  /*
  if(parts[0] == 'git') {
    parts.splice(1, 0, '-c color.ui=always');
  }
  */
  task = parts.join(' ');
}

gr.run(task);
